module.exports = function(RED) {
    const sessionManager = require('./session-manager');

    function PlaywrightSessionEndNode(config) {
        RED.nodes.createNode(this, config);
        const node = this;
        
        this.on('input', async function(msg) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º session_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                const sessionId = msg.session_id || config.session_id;
                
                if (!sessionId) {
                    throw new Error('session_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏');
                }

                node.status({fill:"blue", shape:"dot", text:"–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏..."});
                node.log(`üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏: ${sessionId}`);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                const closed = await sessionManager.closeSession(sessionId);
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (!msg.payload || typeof msg.payload !== 'object') {
                    msg.payload = {};
                }
                
                Object.assign(msg.payload, {
                    success: true,
                    closed: closed,
                    session_id: sessionId,
                    message: closed ? '–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ' : '–°–µ—Å—Å–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞',
                    timestamp: new Date().toISOString()
                });

                // –û—á–∏—â–∞–µ–º session_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞
                delete msg.session_id;
                
                const statusText = closed ? "–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞" : "–£–∂–µ –∑–∞–∫—Ä—ã—Ç–∞";
                node.status({fill:"green", shape:"dot", text: statusText});
                node.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} ${closed ? '–∑–∞–∫—Ä—ã—Ç–∞' : '—É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞'}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –≤—ã—Ö–æ–¥ (—É—Å–ø–µ—Ö)
                node.send([msg, null]);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ playwright-session-end:', error);
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                msg.payload = {
                    success: false,
                    error: error.message,
                    session_id: msg.session_id || config.session_id,
                    node: 'playwright-session-end',
                    timestamp: new Date().toISOString()
                };
                
                node.status({fill:"red", shape:"ring", text:"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è"});
                node.error(error, msg);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤—ã—Ö–æ–¥ (–æ—à–∏–±–∫–∞)
                node.send([null, msg]);
            }
        });
        
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–¥—ã
        this.on('close', function() {
            node.log("üî¥ –ù–æ–¥–∞ playwright-session-end –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è");
            node.status({});
        });
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–¥—É –≤ Node-RED
    RED.nodes.registerType("playwright-session-end", PlaywrightSessionEndNode);
}; 