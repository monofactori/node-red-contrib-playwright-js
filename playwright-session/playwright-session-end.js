module.exports = function(RED) {
    const sessionManager = require('./session-manager');

    function PlaywrightSessionEndNode(config) {
        RED.nodes.createNode(this, config);
        const node = this;
        
        this.on('input', async function(msg) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –∏–ª–∏ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é
                const closeAll = msg.close_all !== undefined ? msg.close_all : config.close_all;
                
                if (closeAll) {
                    // –†–µ–∂–∏–º: –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏
                    node.status({fill:"blue", shape:"dot", text:"–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π..."});
                    node.log(`üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π`);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                    const sessionsInfo = sessionManager.getSessionsInfo();
                    const sessionCount = sessionsInfo.length;
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
                    await sessionManager.closeAllSessions();
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if (!msg.payload || typeof msg.payload !== 'object') {
                        msg.payload = {};
                    }
                    
                    Object.assign(msg.payload, {
                        success: true,
                        closed: sessionCount,
                        mode: 'close_all',
                        sessions_info: sessionsInfo,
                        message: sessionCount > 0 ? `–ó–∞–∫—Ä—ã—Ç–æ ${sessionCount} —Å–µ—Å—Å–∏–π` : '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –±—ã–ª–æ',
                        timestamp: new Date().toISOString()
                    });

                    // –û—á–∏—â–∞–µ–º session_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã)
                    delete msg.session_id;
                    
                    const statusText = sessionCount > 0 ? `–ó–∞–∫—Ä—ã—Ç–æ ${sessionCount} —Å–µ—Å—Å–∏–π` : "–°–µ—Å—Å–∏–π –Ω–µ –±—ã–ª–æ";
                    node.status({fill:"green", shape:"dot", text: statusText});
                    node.log(`‚úÖ ${statusText}`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –≤—ã—Ö–æ–¥ (—É—Å–ø–µ—Ö)
                    node.send([msg, null]);
                    
                } else {
                    // –†–µ–∂–∏–º: –ó–∞–∫—Ä—ã—Ç—å –æ–¥–Ω—É —Å–µ—Å—Å–∏—é
                    const sessionId = msg.session_id || config.session_id;
                    
                    if (!sessionId) {
                        throw new Error('session_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é "–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏" –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è');
                    }

                    node.status({fill:"blue", shape:"dot", text:"–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏..."});
                    node.log(`üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏: ${sessionId}`);
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
                    const closed = await sessionManager.closeSession(sessionId);
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if (!msg.payload || typeof msg.payload !== 'object') {
                        msg.payload = {};
                    }
                    
                    Object.assign(msg.payload, {
                        success: true,
                        closed: closed,
                        mode: 'close_one',
                        session_id: sessionId,
                        message: closed ? '–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ' : '–°–µ—Å—Å–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞',
                        timestamp: new Date().toISOString()
                    });

                    // –û—á–∏—â–∞–µ–º session_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞
                    delete msg.session_id;
                    
                    const statusText = closed ? "–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞" : "–£–∂–µ –∑–∞–∫—Ä—ã—Ç–∞";
                    node.status({fill:"green", shape:"dot", text: statusText});
                    node.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} ${closed ? '–∑–∞–∫—Ä—ã—Ç–∞' : '—É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞'}`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –≤—ã—Ö–æ–¥ (—É—Å–ø–µ—Ö)
                    node.send([msg, null]);
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ playwright-session-end:', error);
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                const closeAll = msg.close_all !== undefined ? msg.close_all : config.close_all;
                
                msg.payload = {
                    success: false,
                    error: error.message,
                    mode: closeAll ? 'close_all' : 'close_one',
                    session_id: closeAll ? undefined : (msg.session_id || config.session_id),
                    node: 'playwright-session-end',
                    timestamp: new Date().toISOString()
                };
                
                node.status({fill:"red", shape:"ring", text:"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è"});
                node.error(error, msg);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤—ã—Ö–æ–¥ (–æ—à–∏–±–∫–∞)
                node.send([null, msg]);
            }
        });
        
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–¥—ã
        this.on('close', function() {
            node.log("üî¥ –ù–æ–¥–∞ playwright-session-end –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è");
            node.status({});
        });
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–¥—É –≤ Node-RED
    RED.nodes.registerType("playwright-session-end", PlaywrightSessionEndNode);
}; 