module.exports = function(RED) {
    const sessionManager = require('./session-manager');

    function PlaywrightSessionActionNode(config) {
        RED.nodes.createNode(this, config);
        const node = this;
        
        this.on('input', async function(msg) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º session_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                const sessionId = msg.session_id || config.session_id;
                
                if (!sessionId) {
                    throw new Error('session_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –æ—Ç –Ω–æ–¥—ã playwright-session-start');
                }

                // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                const action = msg.action || config.action;
                
                if (!action) {
                    throw new Error('action –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (fill_form, click, screenshot, etc.)');
                }

                // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                const params = {
                    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    selector: msg.selector || config.selector,
                    value: msg.value !== undefined ? msg.value : config.value,
                    url: msg.url || config.url,
                    
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∂–∏–¥–∞–Ω–∏—è
                    timeout: msg.timeout || config.timeout,
                    wait_after: msg.wait_after || config.wait_after,
                    waitUntil: msg.waitUntil || config.waituntil, // –¥–ª—è navigate
                    
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
                    fields: msg.fields || config.fields,
                    
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
                    selectors: msg.selectors || config.selectors,
                    
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                    full_page: msg.full_page || config.full_page,
                    
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
                    x: msg.x || config.x,
                    y: msg.y || config.y,
                    
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è JavaScript
                    code: msg.code || config.code,
                    
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
                    text: msg.text || config.text,
                    
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–ø—á–∏ CapMonster Cloud
                    api_key: msg.api_key || config.api_key,
                    website_url: msg.website_url || config.website_url,
                    website_key: msg.website_key || config.website_key,
                    response_selector: msg.response_selector || config.response_selector,
                    image_selector: msg.image_selector || config.image_selector,
                    input_selector: msg.input_selector || config.input_selector,
                    type: msg.captcha_type || config.captcha_type || msg.type, // –¥–ª—è captcha_solve
                    image_base64: msg.image_base64, // —Ç–æ–ª—å–∫–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    user_agent: msg.user_agent,    // —Ç–æ–ª—å–∫–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    proxy: msg.proxy,              // —Ç–æ–ª—å–∫–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Turnstile
                    turnstile_action: msg.turnstile_action || config.turnstile_action,
                    cdata: msg.cdata || config.cdata,
                    chl_page_data: msg.chl_page_data || config.chl_page_data,
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    ...msg.params
                };

                node.status({fill:"blue", shape:"dot", text:`${action}...`});
                node.log(`üîµ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: ${action} –≤ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
                const result = await sessionManager.executeAction(sessionId, action, params);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–¥—ã
                msg.session_id = sessionId;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º payload —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                if (!msg.payload || typeof msg.payload !== 'object') {
                    msg.payload = {};
                }
                
                Object.assign(msg.payload, result);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è
                msg.action_performed = action;
                msg.timestamp = result.timestamp;
                
                // –î–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                if (action === 'screenshot' && result.screenshot) {
                    msg.screenshot = result.screenshot;
                    msg.filename = `screenshot-${Date.now()}.png`;
                    msg.mimetype = 'image/png';
                }
                
                // –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                if (action === 'scrape' && result.scraped_data) {
                    msg.scraped_data = result.scraped_data;
                }
                
                // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                if (action === 'get_text' && result.text !== undefined) {
                    msg.text = result.text;
                }
                
                // –î–ª—è JavaScript
                if (action === 'execute_js' && result.js_result !== undefined) {
                    msg.js_result = result.js_result;
                }
                
                // –î–ª—è –∫–∞–ø—á–∏
                if (action.startsWith('captcha_')) {
                    if (result.captcha_solution) {
                        msg.captcha_solution = result.captcha_solution;
                    }
                    if (result.g_recaptcha_response) {
                        msg.g_recaptcha_response = result.g_recaptcha_response;
                    }
                    if (result.h_captcha_response) {
                        msg.h_captcha_response = result.h_captcha_response;
                    }
                    if (result.turnstile_token) {
                        msg.turnstile_token = result.turnstile_token;
                    }
                    if (result.user_agent) {
                        msg.user_agent = result.user_agent;
                    }
                    if (result.captcha_text) {
                        msg.captcha_text = result.captcha_text;
                    }
                    if (result.balance) {
                        msg.balance = result.balance;
                    }
                }

                const statusText = action === 'screenshot' ? '–°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤' : 
                                  action === 'click' ? '–ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω' :
                                  action === 'fill_form' ? '–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ' :
                                  action === 'scrape' ? '–î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã' :
                                  action === 'captcha_get_balance' ? '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω' :
                                  action === 'captcha_recaptcha_v2' ? 'ReCaptcha —Ä–µ—à–µ–Ω–∞' :
                                  action === 'captcha_hcaptcha' ? 'hCaptcha —Ä–µ—à–µ–Ω–∞' :
                                  action === 'captcha_turnstile' ? 'Turnstile —Ä–µ—à–µ–Ω–∞' :
                                  action === 'captcha_image' ? '–¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞' :
                                  action === 'captcha_solve' ? '–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞' :
                                  '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
                
                node.status({fill:"green", shape:"dot", text: statusText});
                node.log(`‚úÖ –î–µ–π—Å—Ç–≤–∏–µ ${action} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –≤—ã—Ö–æ–¥ (—É—Å–ø–µ—Ö)
                node.send([msg, null]);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ playwright-session-action:', error);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                const sessionId = msg.session_id || config.session_id;
                if (sessionId) {
                    msg.session_id = sessionId;
                }
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                msg.payload = {
                    success: false,
                    error: error.message,
                    action: msg.action || config.action,
                    session_id: sessionId,
                    node: 'playwright-session-action',
                    timestamp: new Date().toISOString()
                };
                
                node.status({fill:"red", shape:"ring", text:"–û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"});
                node.error(error, msg);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤—ã—Ö–æ–¥ (–æ—à–∏–±–∫–∞)
                node.send([null, msg]);
            }
        });
        
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–¥—ã
        this.on('close', function() {
            node.log("üîµ –ù–æ–¥–∞ playwright-session-action –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è");
            node.status({});
        });
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–¥—É –≤ Node-RED
    RED.nodes.registerType("playwright-session-action", PlaywrightSessionActionNode);
}; 