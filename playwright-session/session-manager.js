const { chromium } = require('playwright');

/**
 * üß© –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è Node-RED Playwright
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ Node-RED
 */
class SessionManager {
    constructor() {
        this.sessions = new Map(); // session_id ‚Üí { browser, page, context, created_at }
        this.cleanup_interval = null;
        this.startCleanupTimer();
    }

    /**
     * üü¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
     * @param {string} url - –ù–∞—á–∞–ª—å–Ω—ã–π URL
     * @param {object} options - –û–ø—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
     * @returns {Promise<string>} session_id
     */
    async createSession(url, options = {}) {
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è Raspberry Pi / ARM
            const browserOptions = {
                headless: true,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox', 
                    '--disable-dev-shm-usage',
                    '--disable-gpu',
                    '--disable-features=VizDisplayCompositor',
                    '--no-first-run',
                    '--disable-default-apps'
                ],
                ...options
            };

            console.log('üü¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞...');
            const browser = await chromium.launch(browserOptions);
            const context = await browser.newContext();
            const page = await context.newPage();
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (url) {
                console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: ${url}`);
                await page.goto(url, { 
                    waitUntil: 'networkidle', 
                    timeout: 60000 
                });
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
            const sessionId = `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            this.sessions.set(sessionId, {
                browser,
                page,
                context,
                created_at: new Date(),
                last_activity: new Date(),
                initial_url: url
            });

            console.log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${sessionId}`);
            return sessionId;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error.message);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞: ${error.message}`);
        }
    }

    /**
     * üîµ –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID
     * @param {string} sessionId 
     * @returns {object|null} { browser, page, context }
     */
    getSession(sessionId) {
        const session = this.sessions.get(sessionId);
        if (session) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            session.last_activity = new Date();
            return session;
        }
        return null;
    }

    /**
     * üîµ –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
     * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
     * @param {string} action - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
     * @param {object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
     * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è
     */
    async executeAction(sessionId, action, params = {}) {
        const session = this.getSession(sessionId);
        if (!session) {
            throw new Error(`–°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞`);
        }

        const { page } = session;
        
        try {
            console.log(`üîµ –î–µ–π—Å—Ç–≤–∏–µ: ${action} –≤ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
            let result = { success: true, action, session_id: sessionId };

            switch (action) {
                // üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
                case 'fill_form':
                    if (!params.selector || params.value === undefined) {
                        throw new Error('–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: selector, value');
                    }
                    await page.fill(params.selector, String(params.value));
                    result.message = `–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ ${params.selector}`;
                    break;

                case 'fill_multiple':
                    if (!params.fields || !Array.isArray(params.fields)) {
                        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä fields (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {selector, value})');
                    }
                    for (const field of params.fields) {
                        await page.fill(field.selector, String(field.value));
                    }
                    result.message = `–ó–∞–ø–æ–ª–Ω–µ–Ω–æ ${params.fields.length} –ø–æ–ª–µ–π`;
                    break;

                case 'select_option':
                    if (!params.selector || !params.value) {
                        throw new Error('–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: selector, value');
                    }
                    await page.selectOption(params.selector, params.value);
                    result.message = `–í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è ${params.value}`;
                    break;

                // üñ±Ô∏è –ö–ª–∏–∫–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
                case 'click':
                    if (!params.selector) {
                        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä: selector');
                    }
                    await page.click(params.selector);
                    result.message = `–ö–ª–∏–∫ –ø–æ ${params.selector}`;
                    if (params.wait_after) {
                        await page.waitForTimeout(params.wait_after);
                    }
                    break;

                case 'navigate':
                    if (!params.url) {
                        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä: url');
                    }
                    await page.goto(params.url, { 
                        waitUntil: 'networkidle', 
                        timeout: 60000 
                    });
                    result.new_url = params.url;
                    result.message = `–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ${params.url}`;
                    break;

                case 'go_back':
                    await page.goBack();
                    result.message = '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥';
                    break;

                case 'go_forward':
                    await page.goForward();
                    result.message = '–ü–µ—Ä–µ—Ö–æ–¥ –≤–ø–µ—Ä–µ–¥';
                    break;

                case 'reload':
                    await page.reload();
                    result.message = '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞';
                    break;

                // ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ
                case 'wait_for_element':
                    if (!params.selector) {
                        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä: selector');
                    }
                    await page.waitForSelector(params.selector, { 
                        timeout: params.timeout || 30000 
                    });
                    result.message = `–≠–ª–µ–º–µ–Ω—Ç ${params.selector} –Ω–∞–π–¥–µ–Ω`;
                    break;

                case 'wait_for_text':
                    if (!params.text) {
                        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä: text');
                    }
                    await page.waitForFunction(
                        text => document.body.innerText.includes(text),
                        params.text,
                        { timeout: params.timeout || 30000 }
                    );
                    result.message = `–¢–µ–∫—Å—Ç "${params.text}" –Ω–∞–π–¥–µ–Ω`;
                    break;

                case 'wait_timeout':
                    const timeout = params.timeout || 1000;
                    await page.waitForTimeout(timeout);
                    result.message = `–û–∂–∏–¥–∞–Ω–∏–µ ${timeout}–º—Å`;
                    break;

                // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                case 'screenshot':
                    const screenshot = await page.screenshot({ 
                        type: 'png',
                        encoding: 'base64',
                        fullPage: params.full_page || false
                    });
                    result.screenshot = screenshot;
                    result.message = '–°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω';
                    break;

                case 'get_text':
                    if (!params.selector) {
                        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä: selector');
                    }
                    const element = await page.$(params.selector);
                    if (element) {
                        result.text = await element.textContent();
                        result.message = `–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ ${params.selector}`;
                    } else {
                        throw new Error(`–≠–ª–µ–º–µ–Ω—Ç ${params.selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                    break;

                case 'get_url':
                    result.current_url = page.url();
                    result.message = '–¢–µ–∫—É—â–∏–π URL –ø–æ–ª—É—á–µ–Ω';
                    break;

                case 'scrape':
                    if (!params.selectors) {
                        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä: selectors (–æ–±—ä–µ–∫—Ç)');
                    }
                    const data = {};
                    for (const [key, selector] of Object.entries(params.selectors)) {
                        try {
                            const element = await page.$(selector);
                            data[key] = element ? await element.textContent() : null;
                        } catch (e) {
                            data[key] = null;
                        }
                    }
                    result.scraped_data = data;
                    result.message = `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${Object.keys(data).length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`;
                    break;

                // üíª JavaScript
                case 'execute_js':
                    if (!params.code) {
                        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä: code');
                    }
                    result.js_result = await page.evaluate(params.code);
                    result.message = 'JavaScript –≤—ã–ø–æ–ª–Ω–µ–Ω';
                    break;

                case 'scroll':
                    const x = params.x || 0;
                    const y = params.y || 500;
                    await page.evaluate((x, y) => window.scrollBy(x, y), x, y);
                    result.message = `–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞ ${x}, ${y}`;
                    break;

                default:
                    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            result.current_url = page.url();
            result.timestamp = new Date().toISOString();
            
            console.log(`‚úÖ –î–µ–π—Å—Ç–≤–∏–µ ${action} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
            return result;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è ${action}:`, error.message);
            throw new Error(`–û—à–∏–±–∫–∞ ${action}: ${error.message}`);
        }
    }

    /**
     * üî¥ –ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
     * @param {string} sessionId 
     * @returns {Promise<boolean>}
     */
    async closeSession(sessionId) {
        const session = this.sessions.get(sessionId);
        if (!session) {
            console.warn(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionId} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            return false;
        }

        try {
            console.log(`üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏: ${sessionId}`);
            await session.browser.close();
            this.sessions.delete(sessionId);
            console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} –∑–∞–∫—Ä—ã—Ç–∞`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error.message);
            this.sessions.delete(sessionId); // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            return false;
        }
    }

    /**
     * üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
     */
    startCleanupTimer() {
        // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        this.cleanup_interval = setInterval(() => {
            this.cleanupOldSessions();
        }, 5 * 60 * 1000);
    }

    /**
     * üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (—Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)
     */
    async cleanupOldSessions() {
        const now = new Date();
        const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

        for (const [sessionId, session] of this.sessions.entries()) {
            const age = now - session.last_activity;
            if (age > maxAge) {
                console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏: ${sessionId} (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ${Math.round(age/60000)} –º–∏–Ω)`);
                await this.closeSession(sessionId);
            }
        }
    }

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–µ—Å—Å–∏—è—Ö
     */
    getSessionsInfo() {
        const sessions = [];
        for (const [sessionId, session] of this.sessions.entries()) {
            sessions.push({
                id: sessionId,
                created_at: session.created_at,
                last_activity: session.last_activity,
                initial_url: session.initial_url,
                current_url: session.page.url()
            });
        }
        return sessions;
    }

    /**
     * üõë –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è)
     */
    async closeAllSessions() {
        console.log('üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –±—Ä–∞—É–∑–µ—Ä–∞...');
        const promises = Array.from(this.sessions.keys()).map(id => this.closeSession(id));
        await Promise.all(promises);
        
        if (this.cleanup_interval) {
            clearInterval(this.cleanup_interval);
        }
        
        console.log('‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const sessionManager = new SessionManager();

// –ì—Ä–∞—Üeful shutdown
process.on('SIGINT', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏...');
    await sessionManager.closeAllSessions();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏...');
    await sessionManager.closeAllSessions();
    process.exit(0);
});

module.exports = sessionManager; 