const { chromium } = require('playwright');

async function runAutomation(url = 'https://example.com') {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ ARM/Pi
    const browser = await chromium.launch({ 
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor'
        ]
    });
    const page = await browser.newPage();
    
    try {
        console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: ${url}`);
        await page.goto(url, { waitUntil: 'networkidle', timeout: 60000 });
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const title = await page.title();
        console.log('üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', title);
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        const screenshot = await page.screenshot({ type: 'png' });
        const screenshotBase64 = screenshot.toString('base64');
        console.log('üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            success: true,
            title: title,
            url: page.url(),
            screenshot: screenshotBase64,
            timestamp: new Date().toISOString()
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        return {
            success: false,
            error: error.message,
            url: url
        };
    } finally {
        await browser.close();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏
async function createMultipleSessions() {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    const sessions = [];
    const urls = [
        'https://example.com',
        'https://httpbin.org/get',
        'https://httpbin.org/forms/post'
    ];
    
    try {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π
        for (let i = 0; i < urls.length; i++) {
            const browser = await chromium.launch({ 
                headless: true,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-gpu'
                ]
            });
            
            const page = await browser.newPage();
            await page.goto(urls[i], { waitUntil: 'networkidle', timeout: 30000 });
            
            const sessionInfo = {
                id: `test_session_${i + 1}`,
                browser: browser,
                page: page,
                url: urls[i],
                title: await page.title(),
                created: new Date().toISOString()
            };
            
            sessions.push(sessionInfo);
            console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionInfo.id} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${urls[i]}`);
        }
        
        console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${sessions.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π`);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏—è—Ö
        const sessionsInfo = sessions.map(s => ({
            id: s.id,
            url: s.url,
            title: s.title,
            created: s.created
        }));
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É Node-RED - –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
        console.log('üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π...');
        for (const session of sessions) {
            await session.browser.close();
            console.log(`‚úÖ –°–µ—Å—Å–∏—è ${session.id} –∑–∞–∫—Ä—ã—Ç–∞`);
        }
        
        return {
            success: true,
            sessions_created: sessions.length,
            sessions_info: sessionsInfo,
            message: `–°–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–∫—Ä—ã—Ç–æ ${sessions.length} —Å–µ—Å—Å–∏–π`,
            timestamp: new Date().toISOString()
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Å—Å–∏—è–º–∏:', error.message);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–µ—Å—Å–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        for (const session of sessions) {
            try {
                await session.browser.close();
            } catch (e) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é ${session.id}`);
            }
        }
        
        return {
            success: false,
            error: error.message,
            sessions_created: sessions.length
        };
    }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const command = process.argv[2] || 'test';
    
    if (command === 'multiple') {
        createMultipleSessions()
            .then(result => {
                console.log('üé≠ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π:');
                console.log(JSON.stringify(result, null, 2));
                process.exit(0);
            })
            .catch(error => {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
                process.exit(1);
            });
    } else {
        const url = process.argv[3] || 'https://example.com';
        runAutomation(url)
            .then(result => {
                console.log('üé≠ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:');
                console.log(JSON.stringify(result, null, 2));
                process.exit(0);
            })
            .catch(error => {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
                process.exit(1);
            });
    }
}

module.exports = { runAutomation, createMultipleSessions }; 