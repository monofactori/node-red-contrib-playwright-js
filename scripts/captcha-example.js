/**
 * ü§ñ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CapMonster Cloud –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –≤ Node-RED Playwright
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ ReCaptcha v2
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ hCaptcha  
 * - –†–µ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–ø—á –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * - –ü—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞ CapMonster Cloud
 */

const sessionManager = require('../playwright-session/session-manager');

async function testCaptchaSolving() {
    console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ —Å CapMonster Cloud');
    
    // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á –æ—Ç CapMonster Cloud
    const API_KEY = 'YOUR_CAPMONSTER_API_KEY';
    
    try {
        // 1. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
        console.log('üü¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞...');
        const sessionId = await sessionManager.createSession('https://lessons.zennolab.com/captchas/recaptcha/v2_simple.php?level=high');
        
        // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–µ–ª—Å-—Ä–µ–∂–∏–º
        console.log('üõ°Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–ª—Å-—Ä–µ–∂–∏–º–∞...');
        await sessionManager.executeAction(sessionId, 'stealth_mode');
        
        // 3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞–ø—á–µ–π
        console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        await sessionManager.executeAction(sessionId, 'navigate', {
            url: 'https://lessons.zennolab.com/captchas/recaptcha/v2_simple.php?level=high',
            waitUntil: 'networkidle'
        });
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å CapMonster Cloud
        console.log('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...');
        const balanceResult = await sessionManager.executeAction(sessionId, 'captcha_get_balance', {
            api_key: API_KEY
        });
        console.log(`–ë–∞–ª–∞–Ω—Å: $${balanceResult.balance.balance}`);
        
        if (balanceResult.balance.balance < 0.001) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ CapMonster Cloud');
        }
        
        // 5. –†–µ—à–∞–µ–º ReCaptcha v2
        console.log('üîê –†–µ—à–µ–Ω–∏–µ ReCaptcha v2...');
        const captchaResult = await sessionManager.executeAction(sessionId, 'captcha_recaptcha_v2', {
            api_key: API_KEY,
            website_url: 'https://lessons.zennolab.com/captchas/recaptcha/v2_simple.php?level=high',
            website_key: '6Lcg7CMUAAAAANphynKgn9YAgA4tQ2KI_iqRyTwd',
            response_selector: '[name="g-recaptcha-response"]'
        });
        
        console.log('‚úÖ ReCaptcha —Ä–µ—à–µ–Ω–∞!');
        console.log('Response:', captchaResult.g_recaptcha_response.substring(0, 50) + '...');
        
        // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã...');
        await sessionManager.executeAction(sessionId, 'click', {
            selector: 'input[type="submit"]'
        });
        
        // 7. –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await sessionManager.executeAction(sessionId, 'wait_for_text', {
            text: 'Congratulations',
            timeout: 10000
        });
        
        // 8. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const screenshotResult = await sessionManager.executeAction(sessionId, 'screenshot', {
            full_page: true
        });
        
        console.log('üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        
        // 9. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        await sessionManager.closeSession(sessionId);
        
        return {
            success: true,
            message: '–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
            balance: balanceResult.balance.balance,
            captcha_response: captchaResult.g_recaptcha_response,
            screenshot: screenshotResult.screenshot
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–ø—á–∏:', error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

async function testImageCaptcha() {
    console.log('üì∑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞–ø—á–∏');
    
    const API_KEY = 'YOUR_CAPMONSTER_API_KEY';
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞–ø—á–µ–π
        const sessionId = await sessionManager.createSession();
        
        await sessionManager.executeAction(sessionId, 'navigate', {
            url: 'https://lessons.zennolab.com/captchas/basic'
        });
        
        // –†–µ—à–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–∞–ø—á—É –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        const imageResult = await sessionManager.executeAction(sessionId, 'captcha_image', {
            api_key: API_KEY,
            image_selector: 'img.captcha-image',
            input_selector: 'input[name="captcha_code"]'
        });
        
        console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞:', imageResult.captcha_text);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        await sessionManager.executeAction(sessionId, 'click', {
            selector: 'input[type="submit"]'
        });
        
        await sessionManager.closeSession(sessionId);
        
        return {
            success: true,
            captcha_text: imageResult.captcha_text
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞–ø—á–∏:', error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const testType = process.argv[2] || 'recaptcha';
    
    if (testType === 'image') {
        testImageCaptcha()
            .then(result => {
                console.log('üé≠ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞–ø—á–∏:');
                console.log(JSON.stringify(result, null, 2));
                process.exit(0);
            })
            .catch(error => {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
                process.exit(1);
            });
    } else {
        testCaptchaSolving()
            .then(result => {
                console.log('üé≠ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ReCaptcha:');
                console.log(JSON.stringify(result, null, 2));
                process.exit(0);
            })
            .catch(error => {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
                process.exit(1);
            });
    }
}

module.exports = { testCaptchaSolving, testImageCaptcha }; 